{"ast":null,"code":"import{startOfWeek,subWeeks,format}from'date-fns';import{api}from'./api';// Event-System für Datenänderungen\nconst dataChangeCallbacks=[];const notifyDataChange=()=>{dataChangeCallbacks.forEach(callback=>callback());};export const storage={// Event-System\nonDataChange:callback=>{dataChangeCallbacks.push(callback);return()=>{const index=dataChangeCallbacks.indexOf(callback);if(index>-1){dataChangeCallbacks.splice(index,1);}};},// Abteilungen\ngetDepartments:async()=>{try{return await api.getDepartments();}catch(error){console.error('Fehler beim Laden der Abteilungen:',error);throw error;}},// Mitarbeiter\ngetEmployees:async()=>{try{return await api.getEmployees();}catch(error){console.error('Fehler beim Laden der Mitarbeiter:',error);throw error;}},addEmployee:async employee=>{try{const newEmployee=await api.addEmployee(employee);notifyDataChange();return newEmployee;}catch(error){console.error('Fehler beim Hinzufügen des Mitarbeiters:',error);throw error;}},updateEmployee:async(id,employee)=>{try{const updatedEmployee=await api.updateEmployee(id,employee);notifyDataChange();return updatedEmployee;}catch(error){console.error('Fehler beim Aktualisieren des Mitarbeiters:',error);throw error;}},deleteEmployee:async id=>{try{await api.deleteEmployee(id);notifyDataChange();}catch(error){console.error('Fehler beim Löschen des Mitarbeiters:',error);throw error;}},// Anwesenheit\ngetAttendance:async()=>{try{const attendance=await api.getAttendance();// Alte Daten bereinigen (älter als 1 Woche)\nreturn storage.cleanOldAttendanceData(attendance);}catch(error){console.error('Fehler beim Laden der Anwesenheitsdaten:',error);throw error;}},addAttendanceEntry:async entry=>{try{const newEntry=await api.addAttendanceEntry(entry);notifyDataChange();return newEntry;}catch(error){console.error('Fehler beim Speichern der Anwesenheit:',error);throw error;}},getAttendanceForDate:async date=>{try{const attendance=await storage.getAttendance();return attendance.filter(entry=>entry.date===date);}catch(error){console.error('Fehler beim Laden der Anwesenheit für Datum:',error);throw error;}},getAttendanceForEmployee:async(employeeId,startDate,endDate)=>{try{const attendance=await storage.getAttendance();return attendance.filter(entry=>{if(entry.employeeId!==employeeId)return false;if(startDate&&entry.date<startDate)return false;if(endDate&&entry.date>endDate)return false;return true;});}catch(error){console.error('Fehler beim Laden der Anwesenheit für Mitarbeiter:',error);throw error;}},// Alte Anwesenheitsdaten bereinigen (älter als 1 Woche)\ncleanOldAttendanceData:attendance=>{const oneWeekAgo=startOfWeek(subWeeks(new Date(),1),{weekStartsOn:1});const cutoffDate=format(oneWeekAgo,'yyyy-MM-dd');return attendance.filter(entry=>entry.date>=cutoffDate);},// Anwesenheitsdaten für nicht existierende Mitarbeiter bereinigen\ncleanOrphanedAttendanceData:async()=>{try{const employees=await storage.getEmployees();const attendance=await storage.getAttendance();const employeeIds=employees.map(emp=>emp.id);const cleanedAttendance=attendance.filter(entry=>employeeIds.includes(entry.employeeId));if(cleanedAttendance.length!==attendance.length){console.log('Bereinige verwaiste Anwesenheitsdaten:',{before:attendance.length,after:cleanedAttendance.length,removed:attendance.length-cleanedAttendance.length});// Hier könnten wir einen API-Endpunkt für das Massen-Update hinzufügen\n// Für jetzt ignorieren wir das, da es selten vorkommt\n}}catch(error){console.error('Fehler beim Bereinigen verwaister Anwesenheitsdaten:',error);}}};","map":{"version":3,"names":["startOfWeek","subWeeks","format","api","dataChangeCallbacks","notifyDataChange","forEach","callback","storage","onDataChange","push","index","indexOf","splice","getDepartments","error","console","getEmployees","addEmployee","employee","newEmployee","updateEmployee","id","updatedEmployee","deleteEmployee","getAttendance","attendance","cleanOldAttendanceData","addAttendanceEntry","entry","newEntry","getAttendanceForDate","date","filter","getAttendanceForEmployee","employeeId","startDate","endDate","oneWeekAgo","Date","weekStartsOn","cutoffDate","cleanOrphanedAttendanceData","employees","employeeIds","map","emp","cleanedAttendance","includes","length","log","before","after","removed"],"sources":["C:/Users/MoritzSteinbach/Desktop/Büroplanner/officeplan/src/utils/storage.ts"],"sourcesContent":["import { Employee, AttendanceEntry, Department } from '../types';\r\nimport { startOfWeek, subWeeks, format } from 'date-fns';\r\nimport { api, ApiError } from './api';\r\n\r\n// Event-System für Datenänderungen\r\nconst dataChangeCallbacks: (() => void)[] = [];\r\n\r\nconst notifyDataChange = () => {\r\n  dataChangeCallbacks.forEach(callback => callback());\r\n};\r\n\r\nexport const storage = {\r\n  \r\n  // Event-System\r\n  onDataChange: (callback: () => void) => {\r\n    dataChangeCallbacks.push(callback);\r\n    return () => {\r\n      const index = dataChangeCallbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        dataChangeCallbacks.splice(index, 1);\r\n      }\r\n    };\r\n  },\r\n  \r\n  // Abteilungen\r\n  getDepartments: async (): Promise<Department[]> => {\r\n    try {\r\n      return await api.getDepartments();\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der Abteilungen:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Mitarbeiter\r\n  getEmployees: async (): Promise<Employee[]> => {\r\n    try {\r\n      return await api.getEmployees();\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der Mitarbeiter:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  addEmployee: async (employee: Omit<Employee, 'id'>): Promise<Employee> => {\r\n    try {\r\n      const newEmployee = await api.addEmployee(employee);\r\n      notifyDataChange();\r\n      return newEmployee;\r\n    } catch (error) {\r\n      console.error('Fehler beim Hinzufügen des Mitarbeiters:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateEmployee: async (id: string, employee: Partial<Employee>): Promise<Employee> => {\r\n    try {\r\n      const updatedEmployee = await api.updateEmployee(id, employee);\r\n      notifyDataChange();\r\n      return updatedEmployee;\r\n    } catch (error) {\r\n      console.error('Fehler beim Aktualisieren des Mitarbeiters:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteEmployee: async (id: string): Promise<void> => {\r\n    try {\r\n      await api.deleteEmployee(id);\r\n      notifyDataChange();\r\n    } catch (error) {\r\n      console.error('Fehler beim Löschen des Mitarbeiters:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Anwesenheit\r\n  getAttendance: async (): Promise<AttendanceEntry[]> => {\r\n    try {\r\n      const attendance = await api.getAttendance();\r\n      // Alte Daten bereinigen (älter als 1 Woche)\r\n      return storage.cleanOldAttendanceData(attendance);\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der Anwesenheitsdaten:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  addAttendanceEntry: async (entry: AttendanceEntry): Promise<AttendanceEntry> => {\r\n    try {\r\n      const newEntry = await api.addAttendanceEntry(entry);\r\n      notifyDataChange();\r\n      return newEntry;\r\n    } catch (error) {\r\n      console.error('Fehler beim Speichern der Anwesenheit:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getAttendanceForDate: async (date: string): Promise<AttendanceEntry[]> => {\r\n    try {\r\n      const attendance = await storage.getAttendance();\r\n      return attendance.filter(entry => entry.date === date);\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der Anwesenheit für Datum:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getAttendanceForEmployee: async (employeeId: string, startDate?: string, endDate?: string): Promise<AttendanceEntry[]> => {\r\n    try {\r\n      const attendance = await storage.getAttendance();\r\n      return attendance.filter(entry => {\r\n        if (entry.employeeId !== employeeId) return false;\r\n        if (startDate && entry.date < startDate) return false;\r\n        if (endDate && entry.date > endDate) return false;\r\n        return true;\r\n      });\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der Anwesenheit für Mitarbeiter:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Alte Anwesenheitsdaten bereinigen (älter als 1 Woche)\r\n  cleanOldAttendanceData: (attendance: AttendanceEntry[]): AttendanceEntry[] => {\r\n    const oneWeekAgo = startOfWeek(subWeeks(new Date(), 1), { weekStartsOn: 1 });\r\n    const cutoffDate = format(oneWeekAgo, 'yyyy-MM-dd');\r\n    \r\n    return attendance.filter(entry => entry.date >= cutoffDate);\r\n  },\r\n\r\n  // Anwesenheitsdaten für nicht existierende Mitarbeiter bereinigen\r\n  cleanOrphanedAttendanceData: async (): Promise<void> => {\r\n    try {\r\n      const employees = await storage.getEmployees();\r\n      const attendance = await storage.getAttendance();\r\n      const employeeIds = employees.map(emp => emp.id);\r\n      \r\n      const cleanedAttendance = attendance.filter(entry => \r\n        employeeIds.includes(entry.employeeId)\r\n      );\r\n      \r\n      if (cleanedAttendance.length !== attendance.length) {\r\n        console.log('Bereinige verwaiste Anwesenheitsdaten:', {\r\n          before: attendance.length,\r\n          after: cleanedAttendance.length,\r\n          removed: attendance.length - cleanedAttendance.length\r\n        });\r\n        // Hier könnten wir einen API-Endpunkt für das Massen-Update hinzufügen\r\n        // Für jetzt ignorieren wir das, da es selten vorkommt\r\n      }\r\n    } catch (error) {\r\n      console.error('Fehler beim Bereinigen verwaister Anwesenheitsdaten:', error);\r\n    }\r\n  },\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}