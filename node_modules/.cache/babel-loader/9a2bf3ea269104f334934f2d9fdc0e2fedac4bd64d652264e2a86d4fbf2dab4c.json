{"ast":null,"code":"import { startOfWeek, subWeeks, format } from 'date-fns';\nconst STORAGE_KEYS = {\n  EMPLOYEES: 'office_plan_employees',\n  ATTENDANCE: 'office_plan_attendance',\n  DEPARTMENTS: 'office_plan_departments'\n};\n\n// Standard-Abteilungen\nconst DEFAULT_DEPARTMENTS = [{\n  id: '1',\n  name: 'IT',\n  color: '#3b82f6'\n}, {\n  id: '2',\n  name: 'Marketing',\n  color: '#10b981'\n}, {\n  id: '3',\n  name: 'Vertrieb',\n  color: '#f59e0b'\n}, {\n  id: '4',\n  name: 'HR',\n  color: '#8b5cf6'\n}, {\n  id: '5',\n  name: 'Finanzen',\n  color: '#ef4444'\n}];\n\n// Standard-Mitarbeiter\nconst DEFAULT_EMPLOYEES = [{\n  id: '1',\n  name: 'Max Mustermann',\n  department: 'IT'\n}, {\n  id: '2',\n  name: 'Anna Schmidt',\n  department: 'Marketing'\n}, {\n  id: '3',\n  name: 'Tom Weber',\n  department: 'Vertrieb'\n}, {\n  id: '4',\n  name: 'Lisa Müller',\n  department: 'HR'\n}, {\n  id: '5',\n  name: 'Peter Fischer',\n  department: 'Finanzen'\n}];\n\n// Event-System für Datenänderungen\nconst dataChangeCallbacks = [];\nconst notifyDataChange = () => {\n  dataChangeCallbacks.forEach(callback => callback());\n};\nexport const storage = {\n  // Event-System\n  onDataChange: callback => {\n    dataChangeCallbacks.push(callback);\n    return () => {\n      const index = dataChangeCallbacks.indexOf(callback);\n      if (index > -1) {\n        dataChangeCallbacks.splice(index, 1);\n      }\n    };\n  },\n  // Hilfsfunktion für sicheres localStorage\n  safeLocalStorage: {\n    getItem: key => {\n      try {\n        if (typeof window !== 'undefined' && window.localStorage) {\n          const result = window.localStorage.getItem(key);\n          console.log(`localStorage getItem(${key}):`, result ? 'Daten gefunden' : 'Keine Daten');\n          return result;\n        }\n        console.warn('localStorage nicht verfügbar - window oder localStorage fehlt');\n        return null;\n      } catch (error) {\n        console.error('localStorage Fehler beim Lesen:', error);\n        return null;\n      }\n    },\n    setItem: (key, value) => {\n      try {\n        if (typeof window !== 'undefined' && window.localStorage) {\n          window.localStorage.setItem(key, value);\n          console.log(`localStorage setItem(${key}): Erfolgreich gespeichert`);\n        } else {\n          console.warn('localStorage nicht verfügbar - kann nicht speichern');\n        }\n      } catch (error) {\n        console.error('localStorage Fehler beim Speichern:', error);\n      }\n    },\n    removeItem: key => {\n      try {\n        if (typeof window !== 'undefined' && window.localStorage) {\n          window.localStorage.removeItem(key);\n          console.log(`localStorage removeItem(${key}): Erfolgreich entfernt`);\n        } else {\n          console.warn('localStorage nicht verfügbar - kann nicht entfernen');\n        }\n      } catch (error) {\n        console.error('localStorage Fehler beim Entfernen:', error);\n      }\n    }\n  },\n  // Abteilungen\n  getDepartments: () => {\n    const stored = storage.safeLocalStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (error) {\n        console.warn('Fehler beim Parsen der Abteilungsdaten:', error);\n      }\n    }\n    // Erste Initialisierung\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(DEFAULT_DEPARTMENTS));\n    return DEFAULT_DEPARTMENTS;\n  },\n  setDepartments: departments => {\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\n  },\n  // Mitarbeiter\n  getEmployees: () => {\n    const stored = storage.safeLocalStorage.getItem(STORAGE_KEYS.EMPLOYEES);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (error) {\n        console.warn('Fehler beim Parsen der Mitarbeiterdaten:', error);\n      }\n    }\n    // Erste Initialisierung\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(DEFAULT_EMPLOYEES));\n    return DEFAULT_EMPLOYEES;\n  },\n  setEmployees: employees => {\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(employees));\n    notifyDataChange();\n  },\n  // Anwesenheit\n  getAttendance: () => {\n    const stored = storage.safeLocalStorage.getItem(STORAGE_KEYS.ATTENDANCE);\n    let attendance = [];\n    if (stored) {\n      try {\n        attendance = JSON.parse(stored);\n      } catch (error) {\n        console.warn('Fehler beim Parsen der Anwesenheitsdaten:', error);\n        attendance = [];\n      }\n    }\n\n    // Alte Daten bereinigen (älter als 1 Woche)\n    const cleanedAttendance = storage.cleanOldAttendanceData(attendance);\n    if (cleanedAttendance.length !== attendance.length) {\n      storage.setAttendance(cleanedAttendance);\n    }\n    return cleanedAttendance;\n  },\n  setAttendance: attendance => {\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.ATTENDANCE, JSON.stringify(attendance));\n    notifyDataChange();\n  },\n  // Hilfsfunktionen\n  addAttendanceEntry: entry => {\n    const attendance = storage.getAttendance();\n    const existingIndex = attendance.findIndex(a => a.employeeId === entry.employeeId && a.date === entry.date);\n    if (existingIndex >= 0) {\n      attendance[existingIndex] = entry;\n    } else {\n      attendance.push(entry);\n    }\n    storage.setAttendance(attendance);\n  },\n  getAttendanceForDate: date => {\n    const attendance = storage.getAttendance();\n    return attendance.filter(entry => entry.date === date);\n  },\n  getAttendanceForEmployee: (employeeId, startDate, endDate) => {\n    const attendance = storage.getAttendance();\n    return attendance.filter(entry => {\n      if (entry.employeeId !== employeeId) return false;\n      if (startDate && entry.date < startDate) return false;\n      if (endDate && entry.date > endDate) return false;\n      return true;\n    });\n  },\n  // Alte Anwesenheitsdaten bereinigen (älter als 1 Woche)\n  cleanOldAttendanceData: attendance => {\n    const oneWeekAgo = startOfWeek(subWeeks(new Date(), 1), {\n      weekStartsOn: 1\n    });\n    const cutoffDate = format(oneWeekAgo, 'yyyy-MM-dd');\n    return attendance.filter(entry => entry.date >= cutoffDate);\n  },\n  // Daten zurücksetzen\n  resetData: () => {\n    storage.safeLocalStorage.removeItem(STORAGE_KEYS.EMPLOYEES);\n    storage.safeLocalStorage.removeItem(STORAGE_KEYS.ATTENDANCE);\n    storage.safeLocalStorage.removeItem(STORAGE_KEYS.DEPARTMENTS);\n  },\n  // Anwesenheitsdaten für nicht existierende Mitarbeiter bereinigen\n  cleanOrphanedAttendanceData: () => {\n    const employees = storage.getEmployees();\n    const attendance = storage.getAttendance();\n    const employeeIds = employees.map(emp => emp.id);\n    const cleanedAttendance = attendance.filter(entry => employeeIds.includes(entry.employeeId));\n    if (cleanedAttendance.length !== attendance.length) {\n      console.log('Bereinige verwaiste Anwesenheitsdaten:', {\n        before: attendance.length,\n        after: cleanedAttendance.length,\n        removed: attendance.length - cleanedAttendance.length\n      });\n      storage.setAttendance(cleanedAttendance);\n    }\n  }\n};","map":{"version":3,"names":["startOfWeek","subWeeks","format","STORAGE_KEYS","EMPLOYEES","ATTENDANCE","DEPARTMENTS","DEFAULT_DEPARTMENTS","id","name","color","DEFAULT_EMPLOYEES","department","dataChangeCallbacks","notifyDataChange","forEach","callback","storage","onDataChange","push","index","indexOf","splice","safeLocalStorage","getItem","key","window","localStorage","result","console","log","warn","error","setItem","value","removeItem","getDepartments","stored","JSON","parse","stringify","setDepartments","departments","getEmployees","setEmployees","employees","getAttendance","attendance","cleanedAttendance","cleanOldAttendanceData","length","setAttendance","addAttendanceEntry","entry","existingIndex","findIndex","a","employeeId","date","getAttendanceForDate","filter","getAttendanceForEmployee","startDate","endDate","oneWeekAgo","Date","weekStartsOn","cutoffDate","resetData","cleanOrphanedAttendanceData","employeeIds","map","emp","includes","before","after","removed"],"sources":["C:/Users/jassy/OneDrive/Desktop/work/office plan/src/utils/storage.ts"],"sourcesContent":["import { Employee, AttendanceEntry, Department } from '../types';\nimport { startOfWeek, subWeeks, format } from 'date-fns';\n\nconst STORAGE_KEYS = {\n  EMPLOYEES: 'office_plan_employees',\n  ATTENDANCE: 'office_plan_attendance',\n  DEPARTMENTS: 'office_plan_departments',\n};\n\n// Standard-Abteilungen\nconst DEFAULT_DEPARTMENTS: Department[] = [\n  { id: '1', name: 'IT', color: '#3b82f6' },\n  { id: '2', name: 'Marketing', color: '#10b981' },\n  { id: '3', name: 'Vertrieb', color: '#f59e0b' },\n  { id: '4', name: 'HR', color: '#8b5cf6' },\n  { id: '5', name: 'Finanzen', color: '#ef4444' },\n];\n\n// Standard-Mitarbeiter\nconst DEFAULT_EMPLOYEES: Employee[] = [\n  { id: '1', name: 'Max Mustermann', department: 'IT' },\n  { id: '2', name: 'Anna Schmidt', department: 'Marketing' },\n  { id: '3', name: 'Tom Weber', department: 'Vertrieb' },\n  { id: '4', name: 'Lisa Müller', department: 'HR' },\n  { id: '5', name: 'Peter Fischer', department: 'Finanzen' },\n];\n\n// Event-System für Datenänderungen\nconst dataChangeCallbacks: (() => void)[] = [];\n\nconst notifyDataChange = () => {\n  dataChangeCallbacks.forEach(callback => callback());\n};\n\nexport const storage = {\n  \n  // Event-System\n  onDataChange: (callback: () => void) => {\n    dataChangeCallbacks.push(callback);\n    return () => {\n      const index = dataChangeCallbacks.indexOf(callback);\n      if (index > -1) {\n        dataChangeCallbacks.splice(index, 1);\n      }\n    };\n  },\n  \n  // Hilfsfunktion für sicheres localStorage\n  safeLocalStorage: {\n    getItem: (key: string): string | null => {\n      try {\n        if (typeof window !== 'undefined' && window.localStorage) {\n          const result = window.localStorage.getItem(key);\n          console.log(`localStorage getItem(${key}):`, result ? 'Daten gefunden' : 'Keine Daten');\n          return result;\n        }\n        console.warn('localStorage nicht verfügbar - window oder localStorage fehlt');\n        return null;\n      } catch (error) {\n        console.error('localStorage Fehler beim Lesen:', error);\n        return null;\n      }\n    },\n    \n    setItem: (key: string, value: string): void => {\n      try {\n        if (typeof window !== 'undefined' && window.localStorage) {\n          window.localStorage.setItem(key, value);\n          console.log(`localStorage setItem(${key}): Erfolgreich gespeichert`);\n        } else {\n          console.warn('localStorage nicht verfügbar - kann nicht speichern');\n        }\n      } catch (error) {\n        console.error('localStorage Fehler beim Speichern:', error);\n      }\n    },\n    \n    removeItem: (key: string): void => {\n      try {\n        if (typeof window !== 'undefined' && window.localStorage) {\n          window.localStorage.removeItem(key);\n          console.log(`localStorage removeItem(${key}): Erfolgreich entfernt`);\n        } else {\n          console.warn('localStorage nicht verfügbar - kann nicht entfernen');\n        }\n      } catch (error) {\n        console.error('localStorage Fehler beim Entfernen:', error);\n      }\n    }\n  },\n  \n  // Abteilungen\n  getDepartments: (): Department[] => {\n    const stored = storage.safeLocalStorage.getItem(STORAGE_KEYS.DEPARTMENTS);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (error) {\n        console.warn('Fehler beim Parsen der Abteilungsdaten:', error);\n      }\n    }\n    // Erste Initialisierung\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(DEFAULT_DEPARTMENTS));\n    return DEFAULT_DEPARTMENTS;\n  },\n\n  setDepartments: (departments: Department[]): void => {\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.DEPARTMENTS, JSON.stringify(departments));\n  },\n\n  // Mitarbeiter\n  getEmployees: (): Employee[] => {\n    const stored = storage.safeLocalStorage.getItem(STORAGE_KEYS.EMPLOYEES);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (error) {\n        console.warn('Fehler beim Parsen der Mitarbeiterdaten:', error);\n      }\n    }\n    // Erste Initialisierung\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(DEFAULT_EMPLOYEES));\n    return DEFAULT_EMPLOYEES;\n  },\n\n  setEmployees: (employees: Employee[]): void => {\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.EMPLOYEES, JSON.stringify(employees));\n    notifyDataChange();\n  },\n\n  // Anwesenheit\n  getAttendance: (): AttendanceEntry[] => {\n    const stored = storage.safeLocalStorage.getItem(STORAGE_KEYS.ATTENDANCE);\n    let attendance: AttendanceEntry[] = [];\n    \n    if (stored) {\n      try {\n        attendance = JSON.parse(stored);\n      } catch (error) {\n        console.warn('Fehler beim Parsen der Anwesenheitsdaten:', error);\n        attendance = [];\n      }\n    }\n    \n    // Alte Daten bereinigen (älter als 1 Woche)\n    const cleanedAttendance = storage.cleanOldAttendanceData(attendance);\n    if (cleanedAttendance.length !== attendance.length) {\n      storage.setAttendance(cleanedAttendance);\n    }\n    \n    return cleanedAttendance;\n  },\n\n  setAttendance: (attendance: AttendanceEntry[]): void => {\n    storage.safeLocalStorage.setItem(STORAGE_KEYS.ATTENDANCE, JSON.stringify(attendance));\n    notifyDataChange();\n  },\n\n  // Hilfsfunktionen\n  addAttendanceEntry: (entry: AttendanceEntry): void => {\n    const attendance = storage.getAttendance();\n    const existingIndex = attendance.findIndex(\n      a => a.employeeId === entry.employeeId && a.date === entry.date\n    );\n    \n    if (existingIndex >= 0) {\n      attendance[existingIndex] = entry;\n    } else {\n      attendance.push(entry);\n    }\n    \n    storage.setAttendance(attendance);\n  },\n\n  getAttendanceForDate: (date: string): AttendanceEntry[] => {\n    const attendance = storage.getAttendance();\n    return attendance.filter(entry => entry.date === date);\n  },\n\n  getAttendanceForEmployee: (employeeId: string, startDate?: string, endDate?: string): AttendanceEntry[] => {\n    const attendance = storage.getAttendance();\n    return attendance.filter(entry => {\n      if (entry.employeeId !== employeeId) return false;\n      if (startDate && entry.date < startDate) return false;\n      if (endDate && entry.date > endDate) return false;\n      return true;\n    });\n  },\n\n  // Alte Anwesenheitsdaten bereinigen (älter als 1 Woche)\n  cleanOldAttendanceData: (attendance: AttendanceEntry[]): AttendanceEntry[] => {\n    const oneWeekAgo = startOfWeek(subWeeks(new Date(), 1), { weekStartsOn: 1 });\n    const cutoffDate = format(oneWeekAgo, 'yyyy-MM-dd');\n    \n    return attendance.filter(entry => entry.date >= cutoffDate);\n  },\n\n  // Daten zurücksetzen\n  resetData: (): void => {\n    storage.safeLocalStorage.removeItem(STORAGE_KEYS.EMPLOYEES);\n    storage.safeLocalStorage.removeItem(STORAGE_KEYS.ATTENDANCE);\n    storage.safeLocalStorage.removeItem(STORAGE_KEYS.DEPARTMENTS);\n  },\n\n  // Anwesenheitsdaten für nicht existierende Mitarbeiter bereinigen\n  cleanOrphanedAttendanceData: (): void => {\n    const employees = storage.getEmployees();\n    const attendance = storage.getAttendance();\n    const employeeIds = employees.map(emp => emp.id);\n    \n    const cleanedAttendance = attendance.filter(entry => \n      employeeIds.includes(entry.employeeId)\n    );\n    \n    if (cleanedAttendance.length !== attendance.length) {\n      console.log('Bereinige verwaiste Anwesenheitsdaten:', {\n        before: attendance.length,\n        after: cleanedAttendance.length,\n        removed: attendance.length - cleanedAttendance.length\n      });\n      storage.setAttendance(cleanedAttendance);\n    }\n  },\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}