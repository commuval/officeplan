{"ast":null,"code":"import _objectSpread from\"C:/Users/MoritzSteinbach/Desktop/B\\xFCroplanner/officeplan/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{startOfWeek,subWeeks,format}from'date-fns';import{api}from'./api';import{getDeviceId}from'./identity';// Event-System für Datenänderungen\nconst dataChangeCallbacks=[];const notifyDataChange=()=>{dataChangeCallbacks.forEach(callback=>callback());};export const storage={// Event-System\nonDataChange:callback=>{dataChangeCallbacks.push(callback);return()=>{const index=dataChangeCallbacks.indexOf(callback);if(index>-1){dataChangeCallbacks.splice(index,1);}};},// Abteilungen\ngetDepartments:async()=>{try{return await api.getDepartments();}catch(error){console.error('Fehler beim Laden der Abteilungen:',error);throw error;}},// Mitarbeiter\ngetEmployees:async()=>{try{return await api.getEmployees();}catch(error){console.error('Fehler beim Laden der Mitarbeiter:',error);throw error;}},addEmployee:async employee=>{try{const ownerId=getDeviceId();const newEmployee=await api.addEmployee(_objectSpread(_objectSpread({},employee),{},{ownerId}));notifyDataChange();return newEmployee;}catch(error){console.error('Fehler beim Hinzufügen des Mitarbeiters:',error);throw error;}},updateEmployee:async(id,employee)=>{try{const updatedEmployee=await api.updateEmployee(id,employee);notifyDataChange();return updatedEmployee;}catch(error){console.error('Fehler beim Aktualisieren des Mitarbeiters:',error);throw error;}},deleteEmployee:async id=>{try{await api.deleteEmployee(id);notifyDataChange();}catch(error){console.error('Fehler beim Löschen des Mitarbeiters:',error);throw error;}},// Anwesenheit\ngetAttendance:async()=>{try{const attendance=await api.getAttendance();// Alte Daten bereinigen (älter als 1 Woche)\nreturn storage.cleanOldAttendanceData(attendance);}catch(error){console.error('Fehler beim Laden der Anwesenheitsdaten:',error);throw error;}},addAttendanceEntry:async entry=>{try{var _entry$ownerId;const ownerId=(_entry$ownerId=entry.ownerId)!==null&&_entry$ownerId!==void 0?_entry$ownerId:getDeviceId();const newEntry=await api.addAttendanceEntry(_objectSpread(_objectSpread({},entry),{},{ownerId}));notifyDataChange();return newEntry;}catch(error){console.error('Fehler beim Speichern der Anwesenheit:',error);throw error;}},deleteAttendanceEntry:async(employeeId,date)=>{try{await api.deleteAttendanceEntry(employeeId,date);notifyDataChange();}catch(error){console.error('Fehler beim Löschen der Anwesenheit:',error);throw error;}},getAttendanceForDate:async date=>{try{const attendance=await storage.getAttendance();return attendance.filter(entry=>entry.date===date);}catch(error){console.error('Fehler beim Laden der Anwesenheit für Datum:',error);throw error;}},getAttendanceForEmployee:async(employeeId,startDate,endDate)=>{try{const attendance=await storage.getAttendance();return attendance.filter(entry=>{if(entry.employeeId!==employeeId)return false;if(startDate&&entry.date<startDate)return false;if(endDate&&entry.date>endDate)return false;return true;});}catch(error){console.error('Fehler beim Laden der Anwesenheit für Mitarbeiter:',error);throw error;}},// Alte Anwesenheitsdaten bereinigen (älter als 1 Woche)\ncleanOldAttendanceData:attendance=>{const oneWeekAgo=startOfWeek(subWeeks(new Date(),1),{weekStartsOn:1});const cutoffDate=format(oneWeekAgo,'yyyy-MM-dd');return attendance.filter(entry=>entry.date>=cutoffDate);},// Anwesenheitsdaten für nicht existierende Mitarbeiter bereinigen\ncleanOrphanedAttendanceData:async()=>{try{const employees=await storage.getEmployees();const attendance=await storage.getAttendance();const employeeIds=employees.map(emp=>emp.id);const cleanedAttendance=attendance.filter(entry=>employeeIds.includes(entry.employeeId));if(cleanedAttendance.length!==attendance.length){console.log('Bereinige verwaiste Anwesenheitsdaten:',{before:attendance.length,after:cleanedAttendance.length,removed:attendance.length-cleanedAttendance.length});// Hier könnten wir einen API-Endpunkt für das Massen-Update hinzufügen\n// Für jetzt ignorieren wir das, da es selten vorkommt\n}}catch(error){console.error('Fehler beim Bereinigen verwaister Anwesenheitsdaten:',error);}}};","map":{"version":3,"names":["startOfWeek","subWeeks","format","api","getDeviceId","dataChangeCallbacks","notifyDataChange","forEach","callback","storage","onDataChange","push","index","indexOf","splice","getDepartments","error","console","getEmployees","addEmployee","employee","ownerId","newEmployee","_objectSpread","updateEmployee","id","updatedEmployee","deleteEmployee","getAttendance","attendance","cleanOldAttendanceData","addAttendanceEntry","entry","_entry$ownerId","newEntry","deleteAttendanceEntry","employeeId","date","getAttendanceForDate","filter","getAttendanceForEmployee","startDate","endDate","oneWeekAgo","Date","weekStartsOn","cutoffDate","cleanOrphanedAttendanceData","employees","employeeIds","map","emp","cleanedAttendance","includes","length","log","before","after","removed"],"sources":["C:/Users/MoritzSteinbach/Desktop/Büroplanner/officeplan/src/utils/storage.ts"],"sourcesContent":["import { Employee, AttendanceEntry, Department } from '../types';\nimport { startOfWeek, subWeeks, format } from 'date-fns';\nimport { api, ApiError } from './api';\nimport { getDeviceId } from './identity';\n\n// Event-System für Datenänderungen\nconst dataChangeCallbacks: (() => void)[] = [];\n\nconst notifyDataChange = () => {\n  dataChangeCallbacks.forEach(callback => callback());\n};\n\nexport const storage = {\n  \n  // Event-System\n  onDataChange: (callback: () => void) => {\n    dataChangeCallbacks.push(callback);\n    return () => {\n      const index = dataChangeCallbacks.indexOf(callback);\n      if (index > -1) {\n        dataChangeCallbacks.splice(index, 1);\n      }\n    };\n  },\n  \n  // Abteilungen\n  getDepartments: async (): Promise<Department[]> => {\n    try {\n      return await api.getDepartments();\n    } catch (error) {\n      console.error('Fehler beim Laden der Abteilungen:', error);\n      throw error;\n    }\n  },\n\n  // Mitarbeiter\n  getEmployees: async (): Promise<Employee[]> => {\n    try {\n      return await api.getEmployees();\n    } catch (error) {\n      console.error('Fehler beim Laden der Mitarbeiter:', error);\n      throw error;\n    }\n  },\n\n  addEmployee: async (employee: Omit<Employee, 'id'>): Promise<Employee> => {\n    try {\n      const ownerId = getDeviceId();\n      const newEmployee = await api.addEmployee({ ...employee, ownerId });\n      notifyDataChange();\n      return newEmployee;\n    } catch (error) {\n      console.error('Fehler beim Hinzufügen des Mitarbeiters:', error);\n      throw error;\n    }\n  },\n\n  updateEmployee: async (id: string, employee: Partial<Employee>): Promise<Employee> => {\n    try {\n      const updatedEmployee = await api.updateEmployee(id, employee);\n      notifyDataChange();\n      return updatedEmployee;\n    } catch (error) {\n      console.error('Fehler beim Aktualisieren des Mitarbeiters:', error);\n      throw error;\n    }\n  },\n\n  deleteEmployee: async (id: string): Promise<void> => {\n    try {\n      await api.deleteEmployee(id);\n      notifyDataChange();\n    } catch (error) {\n      console.error('Fehler beim Löschen des Mitarbeiters:', error);\n      throw error;\n    }\n  },\n\n  // Anwesenheit\n  getAttendance: async (): Promise<AttendanceEntry[]> => {\n    try {\n      const attendance = await api.getAttendance();\n      // Alte Daten bereinigen (älter als 1 Woche)\n      return storage.cleanOldAttendanceData(attendance);\n    } catch (error) {\n      console.error('Fehler beim Laden der Anwesenheitsdaten:', error);\n      throw error;\n    }\n  },\n\n  addAttendanceEntry: async (entry: AttendanceEntry): Promise<AttendanceEntry> => {\n    try {\n      const ownerId = entry.ownerId ?? getDeviceId();\n      const newEntry = await api.addAttendanceEntry({ ...entry, ownerId });\n      notifyDataChange();\n      return newEntry;\n    } catch (error) {\n      console.error('Fehler beim Speichern der Anwesenheit:', error);\n      throw error;\n    }\n  },\n\n  deleteAttendanceEntry: async (employeeId: string, date: string): Promise<void> => {\n    try {\n      await api.deleteAttendanceEntry(employeeId, date);\n      notifyDataChange();\n    } catch (error) {\n      console.error('Fehler beim Löschen der Anwesenheit:', error);\n      throw error;\n    }\n  },\n\n  getAttendanceForDate: async (date: string): Promise<AttendanceEntry[]> => {\n    try {\n      const attendance = await storage.getAttendance();\n      return attendance.filter(entry => entry.date === date);\n    } catch (error) {\n      console.error('Fehler beim Laden der Anwesenheit für Datum:', error);\n      throw error;\n    }\n  },\n\n  getAttendanceForEmployee: async (employeeId: string, startDate?: string, endDate?: string): Promise<AttendanceEntry[]> => {\n    try {\n      const attendance = await storage.getAttendance();\n      return attendance.filter(entry => {\n        if (entry.employeeId !== employeeId) return false;\n        if (startDate && entry.date < startDate) return false;\n        if (endDate && entry.date > endDate) return false;\n        return true;\n      });\n    } catch (error) {\n      console.error('Fehler beim Laden der Anwesenheit für Mitarbeiter:', error);\n      throw error;\n    }\n  },\n\n  // Alte Anwesenheitsdaten bereinigen (älter als 1 Woche)\n  cleanOldAttendanceData: (attendance: AttendanceEntry[]): AttendanceEntry[] => {\n    const oneWeekAgo = startOfWeek(subWeeks(new Date(), 1), { weekStartsOn: 1 });\n    const cutoffDate = format(oneWeekAgo, 'yyyy-MM-dd');\n    \n    return attendance.filter(entry => entry.date >= cutoffDate);\n  },\n\n  // Anwesenheitsdaten für nicht existierende Mitarbeiter bereinigen\n  cleanOrphanedAttendanceData: async (): Promise<void> => {\n    try {\n      const employees = await storage.getEmployees();\n      const attendance = await storage.getAttendance();\n      const employeeIds = employees.map(emp => emp.id);\n      \n      const cleanedAttendance = attendance.filter(entry => \n        employeeIds.includes(entry.employeeId)\n      );\n      \n      if (cleanedAttendance.length !== attendance.length) {\n        console.log('Bereinige verwaiste Anwesenheitsdaten:', {\n          before: attendance.length,\n          after: cleanedAttendance.length,\n          removed: attendance.length - cleanedAttendance.length\n        });\n        // Hier könnten wir einen API-Endpunkt für das Massen-Update hinzufügen\n        // Für jetzt ignorieren wir das, da es selten vorkommt\n      }\n    } catch (error) {\n      console.error('Fehler beim Bereinigen verwaister Anwesenheitsdaten:', error);\n    }\n  },\n};\n\n"],"mappings":"+IACA,OAASA,WAAW,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,UAAU,CACxD,OAASC,GAAG,KAAkB,OAAO,CACrC,OAASC,WAAW,KAAQ,YAAY,CAExC;AACA,KAAM,CAAAC,mBAAmC,CAAG,EAAE,CAE9C,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7BD,mBAAmB,CAACE,OAAO,CAACC,QAAQ,EAAIA,QAAQ,CAAC,CAAC,CAAC,CACrD,CAAC,CAED,MAAO,MAAM,CAAAC,OAAO,CAAG,CAErB;AACAC,YAAY,CAAGF,QAAoB,EAAK,CACtCH,mBAAmB,CAACM,IAAI,CAACH,QAAQ,CAAC,CAClC,MAAO,IAAM,CACX,KAAM,CAAAI,KAAK,CAAGP,mBAAmB,CAACQ,OAAO,CAACL,QAAQ,CAAC,CACnD,GAAII,KAAK,CAAG,CAAC,CAAC,CAAE,CACdP,mBAAmB,CAACS,MAAM,CAACF,KAAK,CAAE,CAAC,CAAC,CACtC,CACF,CAAC,CACH,CAAC,CAED;AACAG,cAAc,CAAE,KAAAA,CAAA,GAAmC,CACjD,GAAI,CACF,MAAO,MAAM,CAAAZ,GAAG,CAACY,cAAc,CAAC,CAAC,CACnC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAE,YAAY,CAAE,KAAAA,CAAA,GAAiC,CAC7C,GAAI,CACF,MAAO,MAAM,CAAAf,GAAG,CAACe,YAAY,CAAC,CAAC,CACjC,CAAE,MAAOF,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDG,WAAW,CAAE,KAAO,CAAAC,QAA8B,EAAwB,CACxE,GAAI,CACF,KAAM,CAAAC,OAAO,CAAGjB,WAAW,CAAC,CAAC,CAC7B,KAAM,CAAAkB,WAAW,CAAG,KAAM,CAAAnB,GAAG,CAACgB,WAAW,CAAAI,aAAA,CAAAA,aAAA,IAAMH,QAAQ,MAAEC,OAAO,EAAE,CAAC,CACnEf,gBAAgB,CAAC,CAAC,CAClB,MAAO,CAAAgB,WAAW,CACpB,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,CAAEA,KAAK,CAAC,CAChE,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDQ,cAAc,CAAE,KAAAA,CAAOC,EAAU,CAAEL,QAA2B,GAAwB,CACpF,GAAI,CACF,KAAM,CAAAM,eAAe,CAAG,KAAM,CAAAvB,GAAG,CAACqB,cAAc,CAACC,EAAE,CAAEL,QAAQ,CAAC,CAC9Dd,gBAAgB,CAAC,CAAC,CAClB,MAAO,CAAAoB,eAAe,CACxB,CAAE,MAAOV,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,CAAEA,KAAK,CAAC,CACnE,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDW,cAAc,CAAE,KAAO,CAAAF,EAAU,EAAoB,CACnD,GAAI,CACF,KAAM,CAAAtB,GAAG,CAACwB,cAAc,CAACF,EAAE,CAAC,CAC5BnB,gBAAgB,CAAC,CAAC,CACpB,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,CAAEA,KAAK,CAAC,CAC7D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAY,aAAa,CAAE,KAAAA,CAAA,GAAwC,CACrD,GAAI,CACF,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAA1B,GAAG,CAACyB,aAAa,CAAC,CAAC,CAC5C;AACA,MAAO,CAAAnB,OAAO,CAACqB,sBAAsB,CAACD,UAAU,CAAC,CACnD,CAAE,MAAOb,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,CAAEA,KAAK,CAAC,CAChE,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDe,kBAAkB,CAAE,KAAO,CAAAC,KAAsB,EAA+B,CAC9E,GAAI,KAAAC,cAAA,CACF,KAAM,CAAAZ,OAAO,EAAAY,cAAA,CAAGD,KAAK,CAACX,OAAO,UAAAY,cAAA,UAAAA,cAAA,CAAI7B,WAAW,CAAC,CAAC,CAC9C,KAAM,CAAA8B,QAAQ,CAAG,KAAM,CAAA/B,GAAG,CAAC4B,kBAAkB,CAAAR,aAAA,CAAAA,aAAA,IAAMS,KAAK,MAAEX,OAAO,EAAE,CAAC,CACpEf,gBAAgB,CAAC,CAAC,CAClB,MAAO,CAAA4B,QAAQ,CACjB,CAAE,MAAOlB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,CAAEA,KAAK,CAAC,CAC9D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDmB,qBAAqB,CAAE,KAAAA,CAAOC,UAAkB,CAAEC,IAAY,GAAoB,CAChF,GAAI,CACF,KAAM,CAAAlC,GAAG,CAACgC,qBAAqB,CAACC,UAAU,CAAEC,IAAI,CAAC,CACjD/B,gBAAgB,CAAC,CAAC,CACpB,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDsB,oBAAoB,CAAE,KAAO,CAAAD,IAAY,EAAiC,CACxE,GAAI,CACF,KAAM,CAAAR,UAAU,CAAG,KAAM,CAAApB,OAAO,CAACmB,aAAa,CAAC,CAAC,CAChD,MAAO,CAAAC,UAAU,CAACU,MAAM,CAACP,KAAK,EAAIA,KAAK,CAACK,IAAI,GAAKA,IAAI,CAAC,CACxD,CAAE,MAAOrB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,CAAEA,KAAK,CAAC,CACpE,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDwB,wBAAwB,CAAE,KAAAA,CAAOJ,UAAkB,CAAEK,SAAkB,CAAEC,OAAgB,GAAiC,CACxH,GAAI,CACF,KAAM,CAAAb,UAAU,CAAG,KAAM,CAAApB,OAAO,CAACmB,aAAa,CAAC,CAAC,CAChD,MAAO,CAAAC,UAAU,CAACU,MAAM,CAACP,KAAK,EAAI,CAChC,GAAIA,KAAK,CAACI,UAAU,GAAKA,UAAU,CAAE,MAAO,MAAK,CACjD,GAAIK,SAAS,EAAIT,KAAK,CAACK,IAAI,CAAGI,SAAS,CAAE,MAAO,MAAK,CACrD,GAAIC,OAAO,EAAIV,KAAK,CAACK,IAAI,CAAGK,OAAO,CAAE,MAAO,MAAK,CACjD,MAAO,KAAI,CACb,CAAC,CAAC,CACJ,CAAE,MAAO1B,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oDAAoD,CAAEA,KAAK,CAAC,CAC1E,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAc,sBAAsB,CAAGD,UAA6B,EAAwB,CAC5E,KAAM,CAAAc,UAAU,CAAG3C,WAAW,CAACC,QAAQ,CAAC,GAAI,CAAA2C,IAAI,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAAEC,YAAY,CAAE,CAAE,CAAC,CAAC,CAC5E,KAAM,CAAAC,UAAU,CAAG5C,MAAM,CAACyC,UAAU,CAAE,YAAY,CAAC,CAEnD,MAAO,CAAAd,UAAU,CAACU,MAAM,CAACP,KAAK,EAAIA,KAAK,CAACK,IAAI,EAAIS,UAAU,CAAC,CAC7D,CAAC,CAED;AACAC,2BAA2B,CAAE,KAAAA,CAAA,GAA2B,CACtD,GAAI,CACF,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAvC,OAAO,CAACS,YAAY,CAAC,CAAC,CAC9C,KAAM,CAAAW,UAAU,CAAG,KAAM,CAAApB,OAAO,CAACmB,aAAa,CAAC,CAAC,CAChD,KAAM,CAAAqB,WAAW,CAAGD,SAAS,CAACE,GAAG,CAACC,GAAG,EAAIA,GAAG,CAAC1B,EAAE,CAAC,CAEhD,KAAM,CAAA2B,iBAAiB,CAAGvB,UAAU,CAACU,MAAM,CAACP,KAAK,EAC/CiB,WAAW,CAACI,QAAQ,CAACrB,KAAK,CAACI,UAAU,CACvC,CAAC,CAED,GAAIgB,iBAAiB,CAACE,MAAM,GAAKzB,UAAU,CAACyB,MAAM,CAAE,CAClDrC,OAAO,CAACsC,GAAG,CAAC,wCAAwC,CAAE,CACpDC,MAAM,CAAE3B,UAAU,CAACyB,MAAM,CACzBG,KAAK,CAAEL,iBAAiB,CAACE,MAAM,CAC/BI,OAAO,CAAE7B,UAAU,CAACyB,MAAM,CAAGF,iBAAiB,CAACE,MACjD,CAAC,CAAC,CACF;AACA;AACF,CACF,CAAE,MAAOtC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,CAAEA,KAAK,CAAC,CAC9E,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}